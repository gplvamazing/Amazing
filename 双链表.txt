//头文件 List.h
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
typedef int data;
struct STLnode
{
	//两个指针，双向
	struct STLnode* next;
	struct STLnode* prev;
	data a;
};
typedef struct STLnode Listnode;
Listnode* ListInit(); //初始化
void Listprint(Listnode* phead); //打印
void ListPushback(Listnode* phead, data x); //尾插
void ListPopback(Listnode* phead); //尾删
void ListPusHhead(Listnode* phead, data x); //头插
void ListPopHead(Listnode* phead); //头删
Listnode* Listfind(Listnode* phead, data x); //查找
void ListInsert(Listnode* pos, data x); //任意插入
void ListErase(Listnode* pos); //任意删除

//实现模块 List.c
#include "List.h"
BuyListnode(data x) //开辟函数
{
	Listnode*newnode = (Listnode*)malloc(sizeof(Listnode));
	newnode->a = x;
	newnode->next = NULL;
	newnode->prev = NULL;
	return newnode;
}
Listnode* ListInit() //初始化，改成有哨兵位的头节点
{
	Listnode* phead = BuyListnode(0);
	phead->next = phead;
	phead->prev = phead;
	return phead;
}
void Listprint(Listnode* phead) //打印
{
	Listnode* cut = phead->next;
	while (cut != phead)
	{
		printf("%d ",cut->a);
		cut = cut->next;
	}
	printf("\n");
}
void ListPushback(Listnode* phead, data x) //尾插
{
	assert(phead);
	Listnode* tail = phead->prev; //找到插入之前的尾结点
	Listnode* newnode = BuyListnode(x);
	// phead  tail  newnode
	tail->next = newnode;
	newnode->prev = tail;
	newnode->next = phead;
	phead->prev = newnode;
}
void ListPopback(Listnode* phead) //尾删
{
	assert(phead);
	assert(phead->next != phead); //不为空结点
	Listnode* tail = phead->prev;
	Listnode* prev = tail->prev;
	prev->next = phead;
	phead->prev = prev;
	free(tail);
	tail = NULL;
}
void ListPusHhead(Listnode* phead, data x) //头插
{
	assert(phead);
	Listnode* first = phead->next; 
	Listnode* newnode = BuyListnode(x); 
	// phead  newnode  first
	phead->next = newnode;
	newnode->prev = phead;
	newnode->next = first;
	first->prev = newnode;
}
void ListPopHead(Listnode* phead) //头删
{
	assert(phead);
	assert(phead->next != phead);
	Listnode* first = phead->next;
	Listnode* sound = first->next;
	phead->next = sound;
	sound->prev = phead;
	free(first);
	first = NULL;
}
Listnode* Listfind(Listnode* phead,data x)//查找
{
	assert(phead);
	Listnode* cut = phead->next;
	while (cut != phead)
	{
		if (cut->a == x)
		{
			return cut;
		}
		cut = cut->next;
	}
	return NULL;
}
void ListInsert(Listnode* pos, data x) //任意插入
{
	assert(pos);
	Listnode* prev = pos->prev;
	Listnode* newnode = BuyListnode(x);
	// prev newnode  pos
	prev->next = newnode;
	newnode->prev = prev;
	newnode->next = pos;
	pos->prev = newnode;
}
void ListErase(Listnode* pos) //任意删除
{
	assert(pos);
	Listnode* prev = pos->prev;
	Listnode* tail = pos->next;
	prev->next = tail;
	tail->prev = prev;
	free(pos);
}

//主函数模块 main.c
#include "List.h"
void sqlist()
{
	Listnode* plist = ListInit(); //使用返回值就不用二级指针
	ListPushback(plist, 1);
	ListPushback(plist, 2);
	ListPushback(plist, 3);
	ListPushback(plist, 4);
	Listprint(plist);
	Listnode* pos = Listfind(plist,3);
	if (pos)
	{
		pos->a *= 10;
		printf("找到了，并将值扩大10倍\n");
	}
	else
	{
		printf("没找到\n");
	}
	Listprint(plist);
}
int main()
{
	sqlist();
	return 0;
}